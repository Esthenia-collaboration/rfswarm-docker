name: build-and-test-template

on:
  workflow_call:
    inputs:
      DOCKER_IMAGE_TAG:
        type: string
        default: ${{ github.ref_name }}
      REGISTRY_URL:
        type: string
      DOCKER_IMAGE_PREFIX:
        type: string
    secrets:
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true

jobs:
  # https://stackoverflow.com/questions/76661371/github-actions-build-docker-image-when-there-are-changes-in-folder
  get_changed:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    outputs:
      IMAGES_TO_BUILD: ${{ steps.set_images.outputs.IMAGES_TO_BUILD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Get changed files with predefined action
        id: changed-files
        uses: tj-actions/changed-files@v37
      - name: Save changed files into variable
        run: |
          # save files into variable
          printf 'CHANGED_FILES=%s\n' "${{ steps.changed-files.outputs.all_changed_files }}" >> "${GITHUB_ENV}"
      - name: Get docker image names
        shell: python
        env:
          PROJECT_IMAGES: agent/base agent/seleniumlibrary-chrome agent/sshlibrary agent/seleniumlibrary-firefox
        run: |
          from os import environ
          import json

          # split files string into list. Divide by spaces
          changed_files = environ.get("CHANGED_FILES").split(' ')
          project_images = environ.get("PROJECT_IMAGES").split(' ')

          images_to_build = list()

          # check if image name is a part of changed file path
          for project_image in project_images:
            for changed_file in changed_files:
              if project_image in changed_file:
                images_to_build.append(project_image)
                break

          # save retreived images as json array
          with open(environ.get("GITHUB_ENV"), 'a') as f:
            f.write(f"IMAGES_TO_BUILD={json.dumps(images_to_build)}\n")
      - name: Set image names as output for matrix
        id: set_images
        run: |
          echo "IMAGES_TO_BUILD=${IMAGES_TO_BUILD}" >> $GITHUB_OUTPUT
  check_docker_build:
    name: "Check image: ${{ matrix.image }}"
    runs-on: ubuntu-latest
    needs: get_changed
    strategy:
      fail-fast: true  # Cancel all other jobs if one job is failed
      matrix:
        image: ${{ fromJson( needs.get_changed.outputs.IMAGES_TO_BUILD ) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check that the image builds
        run: docker build -t rfswarm-image-for-check -f ${{ matrix.image }}/Dockerfile .
      - name: Build manager image
        run: |
          docker build -t rfswarm-docker-manager -f manager/Dockerfile .
      - name: Create network
        run: docker network create docker_network
      - name: Run rfswarm agent
        run: |
          docker run --rm --name agent --hostname agent --network docker_network \
          rfswarm-image-for-check
      - name: Run rfswarm manager or pass
        run: |
          if ! [ -f $(pwd)/tests/${{ matrix.image }}/scenario.rfs ]; then
            echo "Scenario file does not exist, nothing to run."
          else
            docker run --rm --name manager --hostname manager --network docker_network \
            -p 8138:8138 \
            --mount type=bind,source=$(pwd)/tests/${{ matrix.image }}/scenario.rfs,target=/src/manager/scenario.rfs \
            -v $(pwd)/tests/suites:/src/tests \
            --mount type=bind,source=$(pwd)/manager/manager.ini,target=/src/manager/manager.ini \
            rfswarm-docker-manager
          fi
      - name: Clean docker space
        run: |
          docker stop agent;
          docker network rm docker_network
  push_to_registry:
    name: Push rfswarm ${{ matrix.image }} image to registry
    needs:
      - get_changed
      - check_docker_build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson( needs.get_changed.outputs.IMAGES_TO_BUILD ) }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to Registry with secret variables
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build the rfswarm agent docker base image
        run: |
          docker build -t "${{ inputs.REGISTRY_URL }}${{ inputs.DOCKER_IMAGE_PREFIX }}"$(echo ${{ matrix.image }} |  sed "s/\//-/g"):${{ inputs.DOCKER_IMAGE_TAG }} \
          -t "${{ inputs.REGISTRY_URL }}${{ inputs.DOCKER_IMAGE_PREFIX }}"$(echo ${{ matrix.image }} |  sed "s/\//-/g"):latest \
          -f ${{ matrix.image }}/Dockerfile .
      - name: Push image on registry
        run: docker push "${{ inputs.REGISTRY_URL }}${{ inputs.DOCKER_IMAGE_PREFIX }}"$(echo ${{ matrix.image }} |  sed "s/\//-/g") --all-tags
